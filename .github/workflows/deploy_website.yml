name: Deploy website

on:
  workflow_call:
    inputs:
      file_path:
        required: true
        type: string
      file_name:
        required: true
        type: string

jobs:
  extract:
    runs-on: ubuntu-latest
    env:
      OUTPUT_FILE: '${{ inputs.file_path }}/common.md'
      CHANGELOG_HEADER: 'Versione,Data,PR,Titolo,Redattore,Verificatore'
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          ref: src
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install csv2md
        run: pip install csv2md
      - name: Extract info from preamble
        run: echo "$(python .github/scripts/parse_frontmatter.py "${{ inputs.file_path }}" "${{ inputs.file_name }}.typ")" >> "$OUTPUT_FILE"
      - name: Insert header into changelog
        run: sed -i -e "1i $CHANGELOG_HEADER" "${{ inputs.file_path }}/log.csv"
      - name: Trim blank lines
        run: sed -i '/^$/d' "${{ inputs.file_path }}/log.csv"
      - name: Insert Astro components
        run: |
          echo -e "\nimport DocumentDetails from '/src/components/DocumentDetails.astro';" >> "$OUTPUT_FILE"
          echo "import ChangelogTable from '/src/components/ChangelogTable.astro';" >> "$OUTPUT_FILE"
          echo -e "\n<DocumentDetails {...frontmatter}/>" >> "$OUTPUT_FILE"
          echo -e "\n<ChangelogTable>" >> "$OUTPUT_FILE"
      - name: Convert changelog
        run: echo -e "$(csv2md '${{ inputs.file_path }}/log.csv')" >> "$OUTPUT_FILE"
      - name: Close Astro component
        run: echo -e "</ChangelogTable>\n" >> "$OUTPUT_FILE"
      - name: Publish document
        uses: actions/upload-artifact@v3
        with:
          name: common.md
          path: ${{ inputs.file_path }}/common.md
          if-no-files-found: error

  transpile:
    runs-on: ubuntu-latest
    env:
      PANDOC_DEB: '${{ vars.PANDOC_DEB_URL }}'
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          ref: src
      - name: Remove preamble
        run: |
          sed -i -e "1,/^);$/d" "${{ inputs.file_path }}/${{ inputs.file_name }}.typ" # Preamble ends with ");"
      - name: Install Pandoc
        run: |
          wget $PANDOC_DEB --no-verbose --output-document pandoc.deb
          sudo dpkg -i pandoc.deb
      - name: Transpile document
        if: inputs.file_name != 'Glossario'
        run: |
          pandoc "${{ inputs.file_path }}/${{ inputs.file_name }}.typ" --from typst --to markdown --output "${{ inputs.file_path }}/content.md"
      - name: Convert glossary
        if: inputs.file_name == 'Glossario'
        run: |
          jq -r 'to_entries | map("## \(.key) \(.value.acronyms | if length > 0 then "(\(. | join(", ")))" else "" end)\n\(.value.description)\n") | join("\n")' "${{ inputs.file_path }}/${{ inputs.file_name }}.json" > "${{ inputs.file_path }}/content.md"
      - name: Publish document
        uses: actions/upload-artifact@v3
        with:
          name: 'content.md'
          path: '${{ inputs.file_path }}/content.md'
          if-no-files-found: error

  merge:
    runs-on: ubuntu-latest
    needs: [extract, transpile]
    steps:
      - name: Set up Git repository
        uses: actions/checkout@v4
        with:
          ref: website
      - name: Define baseline directory
        id: baseline
        run: |
          if [[ "${{ inputs.file_path }}" == *"RTB"* ]]; then
            echo "DIRECTORY=rtb" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.file_path }}" == *"PB"* ]]; then
            echo "DIRECTORY=pb" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.file_path }}" == *"CA"* ]]; then
            echo "DIRECTORY=ca" >> $GITHUB_OUTPUT
          fi
      - name: Define document directory
        id: document_type
        run: |
          if [[ "${{ inputs.file_path }}" == *"Documentazione esterna"* ]]; then
            echo "DIRECTORY='Documentazione esterna'" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.file_path }}" == *"Documentazione interna"* ]]; then
            echo "DIRECTORY='Documentazione interna'" >> $GITHUB_OUTPUT
          fi
      - name: Define report directory
        id: report_type
        run: |
          if [[ "${{ inputs.file_path }}" != *"Verbali"* ]]; then
            echo "DIRECTORY=''" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.file_path }}" == *"Documentazione esterna/Verbali"* ]]; then
            echo "DIRECTORY='Verbali esterni'" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ inputs.file_path }}" == *"Documentazione interna/Verbali"* ]]; then
            echo "DIRECTORY='Verbali interni'" >> $GITHUB_OUTPUT
          fi
      - name: Set working directory
        id: path
        run: echo "WORK_DIR=$(echo 'src/content/docs/${{ steps.baseline.outputs.DIRECTORY }}/${{ steps.document_type.outputs.DIRECTORY }}/${{ steps.report_type.outputs.DIRECTORY }}')" >> $GITHUB_OUTPUT
      - name: Grab common
        uses: actions/download-artifact@v3
        with:
          name: common.md
          path: '${{ steps.path.outputs.WORK_DIR }}'
      - name: Grab transpiled document
        uses: actions/download-artifact@v3
        with:
          name: 'content.md'
          path: '${{ steps.path.outputs.WORK_DIR }}'
      - name: Compose files
        run: |
          cd "${{ steps.path.outputs.WORK_DIR }}"
          git rm --ignore-unmatch "${{ inputs.file_name }}.mdx"
          cat common.md content.md > "${{ inputs.file_name }}.mdx"
      - name: Configure Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git fetch
      - name: Publish document
        run: |
          git add "${{ steps.path.outputs.WORK_DIR }}/${{inputs.file_name}}.mdx"
          git commit -am "Aggiornata pagina web di ${{inputs.file_name}}"
          git push origin website